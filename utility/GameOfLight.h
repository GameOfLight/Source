/*
  GameOfLight.h - GameOfLight library
  Copyright (c) 2013 Stian Selbek.  All right reserved.

  This file is part of Game Of Light.

  Game Of Light is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Game Of Light is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Game Of Light.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef GameOfLight_h
#define GameOfLight_h
#include "Arduino.h"
#include <avr/pgmspace.h>

#define BLACK 0
#define GREEN 1
#define RED 2
#define ORANGE 3

#define CMD_TYPE_SETX 0x80
#define CMD_TYPE_SETY 0x40
#define CMD_TYPE_CLEAR 0x20
//brightness and blink missing

#define PLAYER1 0
#define PLAYER2 1
#define PLAYER3 2
#define PLAYER4 3

#define NORTH 0  //00
#define WEST 1   //01
#define EAST 2   //10: opposite og 01
#define SOUTH 3  //11: opposite of 00
#define NONE 4

#define FONT_5x7 0
#define FONT_3x5 1

static const unsigned char PROGMEM font_5x7[]  = {
  0x00, 0x00, 0x00, 0x00, 0x00,   // sp
  0x00, 0x00, 0x2f, 0x00, 0x00,   // !
  0x00, 0x07, 0x00, 0x07, 0x00,   // "
  0x14, 0x7f, 0x14, 0x7f, 0x14,   // #
  0x24, 0x2a, 0x7f, 0x2a, 0x12,   // $
  0xc4, 0xc8, 0x10, 0x26, 0x46,   // %
  0x36, 0x49, 0x55, 0x22, 0x50,   // &
  0x00, 0x05, 0x03, 0x00, 0x00,   // '
  0x00, 0x1c, 0x22, 0x41, 0x00,   // (
  0x00, 0x41, 0x22, 0x1c, 0x00,   // )
  0x14, 0x08, 0x3E, 0x08, 0x14,   // *
  0x08, 0x08, 0x3E, 0x08, 0x08,   // +
  0x00, 0x00, 0x50, 0x30, 0x00,   // ,
  0x10, 0x10, 0x10, 0x10, 0x10,   // -
  0x00, 0x60, 0x60, 0x00, 0x00,   // .
  0x20, 0x10, 0x08, 0x04, 0x02,   // /
  0x3E, 0x51, 0x49, 0x45, 0x3E,   // 0
  0x00, 0x42, 0x7F, 0x40, 0x00,   // 1
  0x42, 0x61, 0x51, 0x49, 0x46,   // 2
  0x21, 0x41, 0x45, 0x4B, 0x31,   // 3
  0x18, 0x14, 0x12, 0x7F, 0x10,   // 4
  0x27, 0x45, 0x45, 0x45, 0x39,   // 5
  0x3C, 0x4A, 0x49, 0x49, 0x30,   // 6
  0x01, 0x71, 0x09, 0x05, 0x03,   // 7
  0x36, 0x49, 0x49, 0x49, 0x36,   // 8
  0x06, 0x49, 0x49, 0x29, 0x1E,   // 9
  0x00, 0x36, 0x36, 0x00, 0x00,   // :
  0x00, 0x56, 0x36, 0x00, 0x00,   // ;
  0x08, 0x14, 0x22, 0x41, 0x00,   // <
  0x14, 0x14, 0x14, 0x14, 0x14,   // =
  0x00, 0x41, 0x22, 0x14, 0x08,   // >
  0x02, 0x01, 0x51, 0x09, 0x06,   // ?
  0x32, 0x49, 0x59, 0x51, 0x3E,   // @
  0x7E, 0x11, 0x11, 0x11, 0x7E,   // A
  0x7F, 0x49, 0x49, 0x49, 0x36,   // B
  0x3E, 0x41, 0x41, 0x41, 0x22,   // C
  0x7F, 0x41, 0x41, 0x22, 0x1C,   // D
  0x7F, 0x49, 0x49, 0x49, 0x41,   // E
  0x7F, 0x09, 0x09, 0x09, 0x01,   // F
  0x3E, 0x41, 0x49, 0x49, 0x7A,   // G
  0x7F, 0x08, 0x08, 0x08, 0x7F,   // H
  0x00, 0x41, 0x7F, 0x41, 0x00,   // I
  0x20, 0x40, 0x41, 0x3F, 0x01,   // J
  0x7F, 0x08, 0x14, 0x22, 0x41,   // K
  0x7F, 0x40, 0x40, 0x40, 0x40,   // L
  0x7F, 0x02, 0x0C, 0x02, 0x7F,   // M
  0x7F, 0x04, 0x08, 0x10, 0x7F,   // N
  0x3E, 0x41, 0x41, 0x41, 0x3E,   // O
  0x7F, 0x09, 0x09, 0x09, 0x06,   // P
  0x3E, 0x41, 0x51, 0x21, 0x5E,   // Q
  0x7F, 0x09, 0x19, 0x29, 0x46,   // R
  0x46, 0x49, 0x49, 0x49, 0x31,   // S
  0x01, 0x01, 0x7F, 0x01, 0x01,   // T
  0x3F, 0x40, 0x40, 0x40, 0x3F,   // U
  0x1F, 0x20, 0x40, 0x20, 0x1F,   // V
  0x3F, 0x40, 0x38, 0x40, 0x3F,   // W
  0x63, 0x14, 0x08, 0x14, 0x63,   // X
  0x07, 0x08, 0x70, 0x08, 0x07,   // Y
  0x61, 0x51, 0x49, 0x45, 0x43,   // Z
  0x00, 0x7F, 0x41, 0x41, 0x00,   // [
  0x55, 0x2A, 0x55, 0x2A, 0x55,   // backslash
  0x00, 0x41, 0x41, 0x7F, 0x00,   // ]
  0x04, 0x02, 0x01, 0x02, 0x04,   // ^
  0x40, 0x40, 0x40, 0x40, 0x40,   // _
  0x00, 0x01, 0x02, 0x04, 0x00,   // `
  0x20, 0x54, 0x54, 0x54, 0x78,   // a
  0x7F, 0x48, 0x44, 0x44, 0x38,   // b
  0x38, 0x44, 0x44, 0x44, 0x20,   // c
  0x38, 0x44, 0x44, 0x48, 0x7F,   // d
  0x38, 0x54, 0x54, 0x54, 0x18,   // e
  0x08, 0x7E, 0x09, 0x01, 0x02,   // f
  0x0C, 0x52, 0x52, 0x52, 0x3E,   // g
  0x7F, 0x08, 0x04, 0x04, 0x78,   // h
  0x00, 0x44, 0x7D, 0x40, 0x00,   // i
  0x20, 0x40, 0x44, 0x3D, 0x00,   // j
  0x7F, 0x10, 0x28, 0x44, 0x00,   // k
  0x00, 0x41, 0x7F, 0x40, 0x00,   // l
  0x7C, 0x04, 0x18, 0x04, 0x78,   // m
  0x7C, 0x08, 0x04, 0x04, 0x78,   // n
  0x38, 0x44, 0x44, 0x44, 0x38,   // o
  0x7C, 0x14, 0x14, 0x14, 0x08,   // p
  0x08, 0x14, 0x14, 0x18, 0x7C,   // q
  0x7C, 0x08, 0x04, 0x04, 0x08,   // r
  0x48, 0x54, 0x54, 0x54, 0x20,   // s
  0x04, 0x3F, 0x44, 0x40, 0x20,   // t
  0x3C, 0x40, 0x40, 0x20, 0x7C,   // u
  0x1C, 0x20, 0x40, 0x20, 0x1C,   // v
  0x3C, 0x40, 0x30, 0x40, 0x3C,   // w
  0x44, 0x28, 0x10, 0x28, 0x44,   // x
  0x0C, 0x50, 0x50, 0x50, 0x3C,   // y
  0x44, 0x64, 0x54, 0x4C, 0x44,   // z
  0x00, 0x06, 0x09, 0x09, 0x06    // ยบ
};

static const unsigned char PROGMEM font_3x5[]  = {
  0x00, 0x00, 0x00,   // sp
  0x00, 0x17, 0x00,   // !
  0x03, 0x00, 0x03,   // "
  0x1F, 0x0A, 0x1F,   // #
  0x12, 0x1F, 0x09,   // $
  0x19, 0x04, 0x13,   // %
  0x0A, 0x15, 0x1A,   // &
  0x00, 0x03, 0x00,   // '
  0x00, 0x0E, 0x11,   // (
  0x11, 0x0E, 0x00,   // )
  0x0A, 0x04, 0x0A,   // *
  0x04, 0x0E, 0x04,   // +
  0x10, 0x18, 0x00,   // ,
  0x04, 0x04, 0x04,   // -
  0x00, 0x10, 0x00,   // .
  0x18, 0x0E, 0x03,   // /
  0x1F, 0x11, 0x1F,   // 0
  0x00, 0x1F, 0x00,   // 1
  0x1D, 0x15, 0x17,   // 2
  0x11, 0x15, 0x1F,   // 3
  0x07, 0x04, 0x1F,   // 4
  0x17, 0x15, 0x1D,   // 5
  0x1F, 0x15, 0x1D,   // 6
  0x01, 0x01, 0x1F,   // 7
  0x1F, 0x15, 0x1F,   // 8
  0x17, 0x15, 0x1F,   // 9
  0x00, 0x0A, 0x00,   // :
  0x10, 0x0A, 0x00,   // ;
  0x04, 0x0A, 0x11,   // <
  0x0A, 0x0A, 0x0A,   // =
  0x11, 0x0A, 0x04,   // >
  0x01, 0x15, 0x03,   // ?
  0x1F, 0x11, 0x17,   // @
  0x1F, 0x05, 0x1F,   // A
  0x1F, 0x15, 0x0A,   // B
  0x1F, 0x11, 0x11,   // C
  0x1F, 0x11, 0x0E,   // D
  0x1F, 0x15, 0x11,   // E
  0x1F, 0x05, 0x01,   // F
  0x1F, 0x11, 0x1D,   // G
  0x1F, 0x04, 0x1F,   // H
  0x11, 0x1F, 0x11,   // I
  0x18, 0x10, 0x1F,   // J
  0x1F, 0x04, 0x1B,   // K
  0x1F, 0x10, 0x10,   // L
  0x1F, 0x02, 0x1F,   // M
  0x1E, 0x04, 0x0F,   // N
  0x1F, 0x11, 0x1F,   // O
  0x1F, 0x05, 0x07,   // P
  0x0F, 0x09, 0x1F,   // Q
  0x1F, 0x05, 0x1A,   // R
  0x12, 0x15, 0x09,   // S
  0x01, 0x1F, 0x01,   // T
  0x1F, 0x10, 0x1F,   // U
  0x0F, 0x10, 0x0F,   // V
  0x1F, 0x08, 0x1F,   // W
  0x1B, 0x04, 0x1B,   // X
  0x03, 0x1C, 0x03,   // Y
  0x19, 0x15, 0x13,   // Z
  0x00, 0x1F, 0x11,   // [
  0x03, 0x0E, 0x18,   // backslash
  0x11, 0x1F, 0x00,   // ]
  0x02, 0x01, 0x02,   // ^
  0x10, 0x10, 0x10,   // _
  0x01, 0x02, 0x00,   // `
  0x1F, 0x05, 0x1F,   // a
  0x1F, 0x15, 0x0A,   // b
  0x1F, 0x11, 0x11,   // c
  0x1F, 0x11, 0x0E,   // d
  0x1F, 0x15, 0x11,   // e
  0x1F, 0x05, 0x01,   // f
  0x1F, 0x11, 0x1D,   // g
  0x1F, 0x04, 0x1F,   // h
  0x11, 0x1F, 0x11,   // i
  0x18, 0x10, 0x1F,   // j
  0x1F, 0x04, 0x1B,   // k
  0x1F, 0x10, 0x10,   // l
  0x1F, 0x02, 0x1F,   // m
  0x1E, 0x04, 0x0F,   // n
  0x1F, 0x11, 0x1F,   // o
  0x1F, 0x05, 0x07,   // p
  0x0F, 0x09, 0x1F,   // q
  0x1F, 0x05, 0x1A,   // r
  0x12, 0x15, 0x09,   // s
  0x01, 0x1F, 0x01,   // t
  0x1F, 0x10, 0x1F,   // u
  0x0F, 0x10, 0x0F,   // v
  0x1F, 0x08, 0x1F,   // w
  0x1B, 0x04, 0x1B,   // x
  0x03, 0x1C, 0x03,   // y
  0x19, 0x15, 0x13,   // z
  0x03, 0x03, 0x00    // ยบ
};



/* Helper methods for communicating with the LedMatrix through a buffer */
class GameOfLight {
 public:
  GameOfLight();
  void begin();

  /* Methods for moving around and printing to the buffer */
  void gotoXY(const uint8_t index, const uint8_t line);
  void print(const char ch);
  void print(const char ch, const uint8_t colour);
  void print(char *string);
  void print(const char *string, const uint8_t colour);
  void setFont(const uint8_t fontType);
  void setColour(const uint8_t colour);

  uint8_t getPixel(const uint8_t x, const uint8_t y);
  uint8_t getLine();
  uint8_t getIndex();
  uint8_t getColour();
  void setPixel(uint8_t x, uint8_t y, uint8_t val);
  void clear();  /* Clears buffer */
  void clear(uint8_t count); /* Clears count spaces ahead of cursor */
  void clear(uint8_t count, uint8_t pattern); /* Clears count spaces ahead of cursor using pattern */
  void write(const uint8_t data); //Direct write to the buffer's current position
  void blit(const uint8_t *sprite, int x, int y); // Blits a sprite onto the screen
  
  void scrollLeft();
  void scrollLeft(uint8_t line, uint8_t padGreen, uint8_t padRed);
  void scrollRight();
  void scrollRight(uint8_t line, uint8_t padGreen, uint8_t padRed);
  void scrollUp();
  void scrollUp(uint8_t index, uint8_t padcolour);
  void scrollDown();
  void scrollDown(uint8_t index, uint8_t padcolour);

  void drawLine(int8_t x1, int8_t y1);
  void drawLine(int8_t x0, int8_t y0, int8_t x1, int8_t y1);
  void drawLine(int8_t x0, int8_t y0, int8_t x1, int8_t y1, uint8_t colour);
  void drawRect(int8_t x0, int8_t y0, uint8_t width, uint8_t height);
  void drawRect(int8_t x0, int8_t y0, uint8_t width, uint8_t height, uint8_t colour);
  void drawCircle(int8_t x0, int8_t y0, uint8_t radius);
  void drawCircle(int8_t x0, int8_t y0, uint8_t radius, uint8_t colour);

  uint8_t buff[8][128]; /* Screen buffer[line][index]. index < 64 == green, else red. Combine for orange */
  uint8_t *red[8];
  uint8_t *green[8];



  //Storage for controller-info: stores inverted
  volatile uint8_t B[4];
  volatile uint8_t Y[4];
  volatile uint8_t Select[4];
  volatile uint8_t Start[4];
  volatile uint8_t N[4];
  volatile uint8_t S[4];
  volatile uint8_t W[4];
  volatile uint8_t E[4];
  volatile uint8_t A[4];
  volatile uint8_t X[4];
  volatile uint8_t L[4];
  volatile uint8_t R[4];

  //Controller-methods: resets button when called
  uint8_t getA(uint8_t player);
  uint8_t getB(uint8_t player);
  uint8_t getX(uint8_t player);
  uint8_t getY(uint8_t player);
  uint8_t getL(uint8_t player);
  uint8_t getR(uint8_t player);
  uint8_t getStart(uint8_t player);
  uint8_t getSelect(uint8_t player);  
  uint8_t getDir(uint8_t player); //returns one of: NORTH SOUTH EAST WEST NONE
  void resetButtons();
    
  //The following methods are in GameOfLightSim/GameOfLightHW:
  virtual void update() = 0; //Update screen with contents of buffer
  virtual void update(const uint8_t line) = 0; //Update single line of screen with buffer
  virtual void clearDisplay() = 0; //Clear screen and buffer
  // Methods for communicating with the screen directly
  virtual void screen_cmd(uint8_t type, uint8_t value) = 0;
  virtual void screen_data(uint8_t data) = 0;
  virtual void screen_goto(uint8_t index, uint8_t line) = 0;

  //TODO:
  //virtual void getButtons(int Player);

 private:
  uint8_t _colour;     //Active colour
  int8_t _x0, _y0;     //The end coordinates of the last figure drawn (line, rect)
  uint8_t _curr_line;  //Cursor location in the buffer
  uint8_t _curr_shift;
  uint8_t _curr_index; //Cursor location in the buffer
  unsigned char* _font; //The currently selected font
  uint8_t _font_width; //Width of each character in the currently selected font
};

#endif
